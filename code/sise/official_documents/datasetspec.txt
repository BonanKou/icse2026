TensorFlow
API
TensorFlow v2.16.1
Python
Was this helpful?

tf.data.DatasetSpec

bookmark_border


View source on GitHub
Type specification for tf.data.Dataset.

Inherits From: TypeSpec, TraceType

View aliases

tf.data.DatasetSpec(
    element_spec, dataset_shape=()
)
See tf.TypeSpec for more information about TensorFlow type specifications.

dataset = tf.data.Dataset.range(3)
tf.data.DatasetSpec.from_value(dataset)
Attributes
element_spec	The inner element spec.
value_type	The Python type for values that are compatible with this TypeSpec.
In particular, all values that are compatible with this TypeSpec must be an instance of this type.

Methods
experimental_as_proto
View source


experimental_as_proto() -> struct_pb2.TypeSpecProto
Returns a proto representation of the TypeSpec instance.

Do NOT override for custom non-TF types.

experimental_from_proto
View source


@classmethod
experimental_from_proto(
    proto: struct_pb2.TypeSpecProto
) -> 'TypeSpec'
Returns a TypeSpec instance based on the serialized proto.

Do NOT override for custom non-TF types.

Args
proto	Proto generated using 'experimental_as_proto'.
experimental_type_proto
View source


@classmethod
experimental_type_proto() -> Type[struct_pb2.TypeSpecProto]
Returns the type of proto associated with TypeSpec serialization.

Do NOT override for custom non-TF types.

from_value
View source


@staticmethod
from_value(
    value
)
Creates a DatasetSpec for the given tf.data.Dataset value.

is_compatible_with
View source


is_compatible_with(
    spec_or_value
)
Returns true if spec_or_value is compatible with this TypeSpec.

Prefer using "is_subtype_of" and "most_specific_common_supertype" wherever possible.

Args
spec_or_value	A TypeSpec or TypeSpec associated value to compare against.
is_subtype_of
View source


is_subtype_of(
    other
)
See base class.

most_specific_common_supertype
View source


most_specific_common_supertype(
    others
)
See base class.

most_specific_compatible_type
View source


most_specific_compatible_type(
    other: 'TypeSpec'
) -> 'TypeSpec'
Returns the most specific TypeSpec compatible with self and other. (deprecated)

Deprecated: THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use most_specific_common_supertype instead.
Deprecated. Please use most_specific_common_supertype instead. Do not override this function.

Args
other	A TypeSpec.
Raises
ValueError	If there is no TypeSpec that is compatible with both self and other.
__eq__
View source


__eq__(
    other
)
Return self==value.

__ne__
View source


__ne__(
    other
) -> bool
Return self!=value.