Android Developers
Develop
API reference
Was this helpful?



Added in API level 1
NotificationManager

bookmark_border
Kotlin |Java
public class NotificationManager
extends Object

java.lang.Object
   â†³	android.app.NotificationManager

Class to notify the user of events that happen. This is how you tell the user that something has happened in the background.

Notifications can take different forms:

A persistent icon that goes in the status bar and is accessible through the launcher, (when the user selects it, a designated Intent can be launched),
Turning on or flashing LEDs on the device, or
Alerting the user by flashing the backlight, playing a sound, or vibrating.
Each of the notify methods takes an int id parameter and optionally a String tag parameter, which may be null. These parameters are used to form a pair (tag, id), or (null, id) if tag is unspecified. This pair identifies this notification from your app to the system, so that pair should be unique within your app. If you call one of the notify methods with a (tag, id) pair that is currently active and a new set of notification parameters, it will be updated. For example, if you pass a new status bar icon, the old icon in the status bar will be replaced with the new one. This is also the same tag and id you pass to the cancel(int) or cancel(java.lang.String, int) method to clear this notification.

Developer Guides
For a guide to creating notifications, read the Status Bar Notifications developer guide.

See also:

Notification
Summary
Nested classes
class	NotificationManager.Policy
Notification policy configuration. 

Constants
String	ACTION_APP_BLOCK_STATE_CHANGED
Intent that is broadcast when an application is blocked or unblocked.

String	ACTION_AUTOMATIC_ZEN_RULE
Activity Action: Launch an Automatic Zen Rule configuration screen

Input: Optionally, EXTRA_AUTOMATIC_RULE_ID, if the configuration screen for an existing rule should be displayed.

String	ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED
Intent that is broadcast when the status of an AutomaticZenRule has changed.

String	ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGED
Intent that is broadcast when the state of getConsolidatedNotificationPolicy() changes.

String	ACTION_INTERRUPTION_FILTER_CHANGED
Intent that is broadcast when the state of getCurrentInterruptionFilter() changes.

String	ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED
Intent that is broadcast when a NotificationChannel is blocked (when NotificationChannel.getImportance() is IMPORTANCE_NONE) or unblocked (when NotificationChannel.getImportance() is anything other than IMPORTANCE_NONE).

String	ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED
Intent that is broadcast when a NotificationChannelGroup is blocked or unblocked.

String	ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED
Intent that is broadcast when the state of isNotificationPolicyAccessGranted() changes.

String	ACTION_NOTIFICATION_POLICY_CHANGED
Intent that is broadcast when the state of getNotificationPolicy() changes.

int	AUTOMATIC_RULE_STATUS_ACTIVATED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule has been activated by the user or cross device sync.

int	AUTOMATIC_RULE_STATUS_DEACTIVATED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule has been deactivated ("snoozed") by the user.

int	AUTOMATIC_RULE_STATUS_DISABLED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule currently exists but is disabled.

int	AUTOMATIC_RULE_STATUS_ENABLED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule currently exists and is enabled.

int	AUTOMATIC_RULE_STATUS_REMOVED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule has been deleted.

int	AUTOMATIC_RULE_STATUS_UNKNOWN
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the current status of the rule is unknown at your target sdk version, and you should continue to provide state changes via setAutomaticZenRuleState(java.lang.String, android.service.notification.Condition).

int	BUBBLE_PREFERENCE_ALL
Indicates that all bubbles are allowed from the app.

int	BUBBLE_PREFERENCE_NONE
Indicates that the no bubbles are allowed from the app.

int	BUBBLE_PREFERENCE_SELECTED
Indicates that only notifications selected by the user will appear as bubbles.

String	EXTRA_AUTOMATIC_RULE_ID
Used as an optional string extra on ACTION_AUTOMATIC_ZEN_RULE intents.

String	EXTRA_AUTOMATIC_ZEN_RULE_ID
String extra for ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED containing the id of the AutomaticZenRule (see addAutomaticZenRule(android.app.AutomaticZenRule)) that has changed.

String	EXTRA_AUTOMATIC_ZEN_RULE_STATUS
Integer extra for ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED containing the state of the AutomaticZenRule.

String	EXTRA_BLOCKED_STATE
Extra for ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED or ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED containing the new blocked state as a boolean.

String	EXTRA_NOTIFICATION_CHANNEL_GROUP_ID
Extra for ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED containing the id of the NotificationChannelGroup which has a new blocked state.

String	EXTRA_NOTIFICATION_CHANNEL_ID
Extra for ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED containing the id of the NotificationChannel which has a new blocked state.

String	EXTRA_NOTIFICATION_POLICY
Extra for ACTION_NOTIFICATION_POLICY_CHANGED and ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGED containing the new Policy value.

int	IMPORTANCE_DEFAULT
Default notification importance: shows everywhere, makes noise, but does not visually intrude.

int	IMPORTANCE_HIGH
Higher notification importance: shows everywhere, makes noise and peeks.

int	IMPORTANCE_LOW
Low notification importance: Shows in the shade, and potentially in the status bar (see shouldHideSilentStatusBarIcons()), but is not audibly intrusive.

int	IMPORTANCE_MAX
Unused.

int	IMPORTANCE_MIN
Min notification importance: only shows in the shade, below the fold.

int	IMPORTANCE_NONE
A notification with no importance: does not show in the shade.

int	IMPORTANCE_UNSPECIFIED
Value signifying that the user has not expressed an importance.

int	INTERRUPTION_FILTER_ALARMS
Interruption filter constant - Alarms only interruption filter - all notifications except those of category Notification.CATEGORY_ALARM are suppressed.

int	INTERRUPTION_FILTER_ALL
Interruption filter constant - Normal interruption filter - no notifications are suppressed.

int	INTERRUPTION_FILTER_NONE
Interruption filter constant - No interruptions filter - all notifications are suppressed and all audio streams (except those used for phone calls) and vibrations are muted.

int	INTERRUPTION_FILTER_PRIORITY
Interruption filter constant - Priority interruption filter - all notifications are suppressed except those that match the priority criteria.

int	INTERRUPTION_FILTER_UNKNOWN
Interruption filter constant - returned when the value is unavailable for any reason.

String	META_DATA_AUTOMATIC_RULE_TYPE
A required meta-data tag for activities that handle ACTION_AUTOMATIC_ZEN_RULE.

String	META_DATA_RULE_INSTANCE_LIMIT
An optional meta-data tag for activities that handle ACTION_AUTOMATIC_ZEN_RULE.

Public methods
String	addAutomaticZenRule(AutomaticZenRule automaticZenRule)
Creates the given zen rule.

boolean	areAutomaticZenRulesUserManaged()
Returns true if users can independently and fully manage AutomaticZenRule rules.

boolean	areBubblesAllowed()
This method was deprecated in API level 31. use getBubblePreference() instead.

boolean	areBubblesEnabled()
Returns whether bubbles are enabled at the feature level for the current user.

boolean	areNotificationsEnabled()
Returns whether notifications from the calling package are enabled.

boolean	areNotificationsPaused()
Returns whether notifications from this package are temporarily hidden.

boolean	canNotifyAsPackage(String pkg)
Returns whether you are allowed to post notifications on behalf of a given package, with notifyAsPackage(java.lang.String, java.lang.String, int, android.app.Notification).

boolean	canPostPromotedNotifications()
Returns whether the calling app's properly formatted notifications can appear in a promoted format, which may result in higher ranking, appearances on additional surfaces, and richer presentation.

boolean	canUseFullScreenIntent()
Returns whether the calling app can send fullscreen intents.

void	cancel(int id)
Cancels a previously posted notification.

void	cancel(String tag, int id)
Cancels a previously posted notification.

void	cancelAll()
Cancel all previously shown notifications.

void	cancelAsPackage(String targetPackage, String tag, int id)
Cancels a previously posted notification.

void	createNotificationChannel(NotificationChannel channel)
Creates a notification channel that notifications can be posted to.

void	createNotificationChannelGroup(NotificationChannelGroup group)
Creates a group container for NotificationChannel objects.

void	createNotificationChannelGroups(List<NotificationChannelGroup> groups)
Creates multiple notification channel groups.

void	createNotificationChannels(List<NotificationChannel> channels)
Creates multiple notification channels that different notifications can be posted to.

void	deleteNotificationChannel(String channelId)
Deletes the given notification channel.

void	deleteNotificationChannelGroup(String groupId)
Deletes the given notification channel group, and all notification channels that belong to it.

StatusBarNotification[]	getActiveNotifications()
Recover a list of active notifications: ones that have been posted by the calling app that have not yet been dismissed by the user or cancel(java.lang.String, int)ed by the app.

AutomaticZenRule	getAutomaticZenRule(String id)
Returns the AutomaticZenRule with the given id, if it exists and the caller has access.

int	getAutomaticZenRuleState(String id)
Returns the current activation state of an AutomaticZenRule.

Map<String, AutomaticZenRule>	getAutomaticZenRules()
Returns AutomaticZenRules owned by the caller.

int	getBubblePreference()
Gets the bubble preference for the app.

NotificationManager.Policy	getConsolidatedNotificationPolicy()
Returns the currently applied notification policy.

final int	getCurrentInterruptionFilter()
Gets the current notification interruption filter.

int	getImportance()
Returns the user specified importance for notifications from the calling package.

NotificationChannel	getNotificationChannel(String channelId)
Returns the notification channel settings for a given channel id.

NotificationChannel	getNotificationChannel(String channelId, String conversationId)
Returns the notification channel settings for a given channel and conversation id.

NotificationChannelGroup	getNotificationChannelGroup(String channelGroupId)
Returns the notification channel group settings for a given channel group id.

List<NotificationChannelGroup>	getNotificationChannelGroups()
Returns all notification channel groups belonging to the calling app.

List<NotificationChannel>	getNotificationChannels()
Returns all notification channels belonging to the calling package.

String	getNotificationDelegate()
Returns the delegate that can post notifications on your behalf, if there currently is one.

NotificationManager.Policy	getNotificationPolicy()
Gets the current user-specified default notification policy.

boolean	isNotificationListenerAccessGranted(ComponentName listener)
Checks whether the user has approved a given NotificationListenerService.

boolean	isNotificationPolicyAccessGranted()
Checks the ability to modify Notification Policy for the calling package.

boolean	matchesCallFilter(Uri uri)
Returns whether a call from the provided URI is permitted to notify the user.

void	notify(int id, Notification notification)
Post a notification to be shown in the status bar.

void	notify(String tag, int id, Notification notification)
Posts a notification to be shown in the status bar.

void	notifyAsPackage(String targetPackage, String tag, int id, Notification notification)
Posts a notification as a specified package to be shown in the status bar.

boolean	removeAutomaticZenRule(String id)
Deletes the automatic zen rule with the given id.

void	setAutomaticZenRuleState(String id, Condition condition)
Informs the notification manager that the state of an AutomaticZenRule has changed.

final void	setInterruptionFilter(int interruptionFilter)
Sets the current notification interruption filter.

void	setNotificationDelegate(String delegate)
Allows a package to post notifications on your behalf using notifyAsPackage(java.lang.String, java.lang.String, int, android.app.Notification).

void	setNotificationPolicy(NotificationManager.Policy policy)
Sets the current notification policy (which applies when setInterruptionFilter(int) is called with the INTERRUPTION_FILTER_PRIORITY value).

boolean	shouldHideSilentStatusBarIcons()
Returns whether the user wants silent notifications (see IMPORTANCE_LOW to appear in the status bar.

boolean	updateAutomaticZenRule(String id, AutomaticZenRule automaticZenRule)
Updates the given zen rule.

Inherited methods
From class java.lang.Object
Constants
ACTION_APP_BLOCK_STATE_CHANGED
Added in API level 28
public static final String ACTION_APP_BLOCK_STATE_CHANGED
Intent that is broadcast when an application is blocked or unblocked. This broadcast is only sent to the app whose block state has changed. Input: nothing Output: EXTRA_BLOCKED_STATE

Constant Value: "android.app.action.APP_BLOCK_STATE_CHANGED"

ACTION_AUTOMATIC_ZEN_RULE
Added in API level 29
public static final String ACTION_AUTOMATIC_ZEN_RULE
Activity Action: Launch an Automatic Zen Rule configuration screen

Input: Optionally, EXTRA_AUTOMATIC_RULE_ID, if the configuration screen for an existing rule should be displayed. If the rule id is missing or null, apps should display a configuration screen where users can create a new instance of the rule.

Output: Nothing

You can have multiple activities handling this intent, if you support multiple rules. In order for the system to properly display all of your rule types so that users can create new instances or configure existing ones, you need to add some extra metadata (META_DATA_AUTOMATIC_RULE_TYPE) to your activity tag in your manifest. If you'd like to limit the number of rules a user can create from this flow, you can additionally optionally include META_DATA_RULE_INSTANCE_LIMIT. For example,

     <meta-data
         android:name="android.service.zen.automatic.ruleType"
         android:value="@string/my_condition_rule" />
     <meta-data
         android:name="android.service.zen.automatic.ruleInstanceLimit"
         android:value="1" />
     
 
See also:

addAutomaticZenRule(AutomaticZenRule)
Constant Value: "android.app.action.AUTOMATIC_ZEN_RULE"

ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED
Added in API level 30
public static final String ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED
Intent that is broadcast when the status of an AutomaticZenRule has changed.

Use this to know whether you need to continue monitor to device state in order to provide up-to-date states (with setAutomaticZenRuleState(java.lang.String, android.service.notification.Condition)) for this rule.

Input: nothing Output: EXTRA_AUTOMATIC_ZEN_RULE_ID Output: EXTRA_AUTOMATIC_ZEN_RULE_STATUS
Constant Value: "android.app.action.AUTOMATIC_ZEN_RULE_STATUS_CHANGED"

ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGED
Added in API level 35
public static final String ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGED
Intent that is broadcast when the state of getConsolidatedNotificationPolicy() changes.

This broadcast is only sent to registered receivers and receivers in packages that have been granted Notification Policy access (see isNotificationPolicyAccessGranted()).

Constant Value: "android.app.action.CONSOLIDATED_NOTIFICATION_POLICY_CHANGED"

ACTION_INTERRUPTION_FILTER_CHANGED
Added in API level 23
public static final String ACTION_INTERRUPTION_FILTER_CHANGED
Intent that is broadcast when the state of getCurrentInterruptionFilter() changes.

This broadcast is only sent to registered receivers and (starting from Build.VERSION_CODES.Q) receivers in packages that have been granted Do Not Disturb access (see isNotificationPolicyAccessGranted()).

Constant Value: "android.app.action.INTERRUPTION_FILTER_CHANGED"

ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED
Added in API level 28

public static final String ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED
Intent that is broadcast when a NotificationChannel is blocked (when NotificationChannel.getImportance() is IMPORTANCE_NONE) or unblocked (when NotificationChannel.getImportance() is anything other than IMPORTANCE_NONE). This broadcast is only sent to the app that owns the channel that has changed. Input: nothing Output: EXTRA_NOTIFICATION_CHANNEL_ID Output: EXTRA_BLOCKED_STATE

Constant Value: "android.app.action.NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED"

ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED
Added in API level 28

public static final String ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED
Intent that is broadcast when a NotificationChannelGroup is blocked or unblocked. This broadcast is only sent to the app that owns the channel group that has changed. Input: nothing Output: EXTRA_NOTIFICATION_CHANNEL_GROUP_ID Output: EXTRA_BLOCKED_STATE

Constant Value: "android.app.action.NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED"

ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED
Added in API level 23

public static final String ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED
Intent that is broadcast when the state of isNotificationPolicyAccessGranted() changes. This broadcast is only sent to registered receivers, and only to the apps that have changed.

Constant Value: "android.app.action.NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED"

ACTION_NOTIFICATION_POLICY_CHANGED
Added in API level 23

public static final String ACTION_NOTIFICATION_POLICY_CHANGED
Intent that is broadcast when the state of getNotificationPolicy() changes.

This broadcast is only sent to registered receivers and (starting from Build.VERSION_CODES.Q) receivers in packages that have been granted Do Not Disturb access (see isNotificationPolicyAccessGranted()).

Starting with Build.VERSION_CODES.VANILLA_ICE_CREAM, most calls to setNotificationPolicy(android.app.NotificationManager.Policy) will update the app's implicit rule policy instead of the global policy, so this broadcast will be sent much less frequently.

Constant Value: "android.app.action.NOTIFICATION_POLICY_CHANGED"

AUTOMATIC_RULE_STATUS_ACTIVATED
Added in API level 35

public static final int AUTOMATIC_RULE_STATUS_ACTIVATED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule has been activated by the user or cross device sync. Sent from Build.VERSION_CODES.VANILLA_ICE_CREAM. If the rule owner has a mode that includes a DND component, the rule owner should activate any extra behavior that's part of that mode in response to this broadcast.

Constant Value: 4 (0x00000004)

AUTOMATIC_RULE_STATUS_DEACTIVATED
Added in API level 35

public static final int AUTOMATIC_RULE_STATUS_DEACTIVATED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule has been deactivated ("snoozed") by the user. The rule will not return to an activated state until the app calls setAutomaticZenRuleState(java.lang.String, android.service.notification.Condition) with Condition.STATE_FALSE (either immediately or when the trigger criteria is no longer met) and then Condition.STATE_TRUE when the trigger criteria is freshly met, or when the user re-activates it.

Constant Value: 5 (0x00000005)

AUTOMATIC_RULE_STATUS_DISABLED
Added in API level 30

public static final int AUTOMATIC_RULE_STATUS_DISABLED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule currently exists but is disabled. You do not need to continue to provide state changes via setAutomaticZenRuleState(java.lang.String, android.service.notification.Condition) until the rule is reenabled.

Constant Value: 2 (0x00000002)

AUTOMATIC_RULE_STATUS_ENABLED
Added in API level 30

public static final int AUTOMATIC_RULE_STATUS_ENABLED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule currently exists and is enabled. You should continue to provide state changes via setAutomaticZenRuleState(java.lang.String, android.service.notification.Condition).

Constant Value: 1 (0x00000001)

AUTOMATIC_RULE_STATUS_REMOVED
Added in API level 30
public static final int AUTOMATIC_RULE_STATUS_REMOVED
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the given rule has been deleted. Further calls to setAutomaticZenRuleState(java.lang.String, android.service.notification.Condition) will be ignored.

Constant Value: 3 (0x00000003)

AUTOMATIC_RULE_STATUS_UNKNOWN
Added in API level 30

public static final int AUTOMATIC_RULE_STATUS_UNKNOWN
Constant value for EXTRA_AUTOMATIC_ZEN_RULE_STATUS - the current status of the rule is unknown at your target sdk version, and you should continue to provide state changes via setAutomaticZenRuleState(java.lang.String, android.service.notification.Condition).

Constant Value: -1 (0xffffffff)

BUBBLE_PREFERENCE_ALL
Added in API level 31

public static final int BUBBLE_PREFERENCE_ALL
Indicates that all bubbles are allowed from the app. If the app sends bubbles, the bubble will appear along with the notification.

Constant Value: 1 (0x00000001)

BUBBLE_PREFERENCE_NONE
Added in API level 31

public static final int BUBBLE_PREFERENCE_NONE
Indicates that the no bubbles are allowed from the app. If the app sends bubbles, only the notification will appear. The notification will have an affordance allowing the user to bubble it. If the user selects this affordance, that notification is approved to bubble and the apps' bubble preference will be upgraded to BUBBLE_PREFERENCE_SELECTED.

Constant Value: 0 (0x00000000)

BUBBLE_PREFERENCE_SELECTED
Added in API level 31

public static final int BUBBLE_PREFERENCE_SELECTED
Indicates that only notifications selected by the user will appear as bubbles. If the app sends bubbles that haven't been selected, only the notification appear. If the bubble has been approved by the user, it will appear along with the notification.

Constant Value: 2 (0x00000002)

EXTRA_AUTOMATIC_RULE_ID
Added in API level 29

public static final String EXTRA_AUTOMATIC_RULE_ID
Used as an optional string extra on ACTION_AUTOMATIC_ZEN_RULE intents. If provided, contains the id of the AutomaticZenRule (as returned from NotificationManager.addAutomaticZenRule(AutomaticZenRule)) for which configuration settings should be displayed.

Constant Value: "android.app.extra.AUTOMATIC_RULE_ID"

EXTRA_AUTOMATIC_ZEN_RULE_ID
Added in API level 30

public static final String EXTRA_AUTOMATIC_ZEN_RULE_ID
String extra for ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED containing the id of the AutomaticZenRule (see addAutomaticZenRule(android.app.AutomaticZenRule)) that has changed.

Constant Value: "android.app.extra.AUTOMATIC_ZEN_RULE_ID"

EXTRA_AUTOMATIC_ZEN_RULE_STATUS
Added in API level 30

public static final String EXTRA_AUTOMATIC_ZEN_RULE_STATUS
Integer extra for ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED containing the state of the AutomaticZenRule.

The value will be one of AUTOMATIC_RULE_STATUS_ENABLED, AUTOMATIC_RULE_STATUS_DISABLED, AUTOMATIC_RULE_STATUS_REMOVED, AUTOMATIC_RULE_STATUS_ACTIVATED, AUTOMATIC_RULE_STATUS_DEACTIVATED, or AUTOMATIC_RULE_STATUS_UNKNOWN.

Note that the AUTOMATIC_RULE_STATUS_ACTIVATED and AUTOMATIC_RULE_STATUS_DEACTIVATED statuses are only sent to packages targeting Build.VERSION_CODES.VANILLA_ICE_CREAM and above; apps targeting a lower SDK version will be sent AUTOMATIC_RULE_STATUS_UNKNOWN in their place instead.

Constant Value: "android.app.extra.AUTOMATIC_ZEN_RULE_STATUS"

EXTRA_BLOCKED_STATE
Added in API level 28

public static final String EXTRA_BLOCKED_STATE
Extra for ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED or ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED containing the new blocked state as a boolean. The value will be true if this channel or group is now blocked and false if this channel or group is now unblocked.

Constant Value: "android.app.extra.BLOCKED_STATE"

EXTRA_NOTIFICATION_CHANNEL_GROUP_ID
Added in API level 28

public static final String EXTRA_NOTIFICATION_CHANNEL_GROUP_ID
Extra for ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED containing the id of the NotificationChannelGroup which has a new blocked state. The value will be the NotificationChannelGroup.getId() of the group.

Constant Value: "android.app.extra.NOTIFICATION_CHANNEL_GROUP_ID"

EXTRA_NOTIFICATION_CHANNEL_ID
Added in API level 28

public static final String EXTRA_NOTIFICATION_CHANNEL_ID
Extra for ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED containing the id of the NotificationChannel which has a new blocked state. The value will be the NotificationChannel.getId() of the channel.

Constant Value: "android.app.extra.NOTIFICATION_CHANNEL_ID"

EXTRA_NOTIFICATION_POLICY
Added in API level 35

public static final String EXTRA_NOTIFICATION_POLICY
Extra for ACTION_NOTIFICATION_POLICY_CHANGED and ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGED containing the new Policy value.

Constant Value: "android.app.extra.NOTIFICATION_POLICY"

IMPORTANCE_DEFAULT
Added in API level 24

public static final int IMPORTANCE_DEFAULT
Default notification importance: shows everywhere, makes noise, but does not visually intrude.

Constant Value: 3 (0x00000003)

IMPORTANCE_HIGH
Added in API level 24

public static final int IMPORTANCE_HIGH
Higher notification importance: shows everywhere, makes noise and peeks. May use full screen intents.

Constant Value: 4 (0x00000004)

IMPORTANCE_LOW
Added in API level 24

public static final int IMPORTANCE_LOW
Low notification importance: Shows in the shade, and potentially in the status bar (see shouldHideSilentStatusBarIcons()), but is not audibly intrusive.

Constant Value: 2 (0x00000002)

IMPORTANCE_MAX
Added in API level 24

public static final int IMPORTANCE_MAX
Unused.

Constant Value: 5 (0x00000005)

IMPORTANCE_MIN
Added in API level 24

public static final int IMPORTANCE_MIN
Min notification importance: only shows in the shade, below the fold. This should not be used with Service.startForeground since a foreground service is supposed to be something the user cares about so it does not make semantic sense to mark its notification as minimum importance. If you do this as of Android version Build.VERSION_CODES.O, the system will show a higher-priority notification about your app running in the background.

Constant Value: 1 (0x00000001)

IMPORTANCE_NONE
Added in API level 24

public static final int IMPORTANCE_NONE
A notification with no importance: does not show in the shade.

Constant Value: 0 (0x00000000)

IMPORTANCE_UNSPECIFIED
Added in API level 24

public static final int IMPORTANCE_UNSPECIFIED
Value signifying that the user has not expressed an importance. This value is for persisting preferences, and should never be associated with an actual notification.

Constant Value: -1000 (0xfffffc18)

INTERRUPTION_FILTER_ALARMS
Added in API level 23

public static final int INTERRUPTION_FILTER_ALARMS
Interruption filter constant - Alarms only interruption filter - all notifications except those of category Notification.CATEGORY_ALARM are suppressed. Some audio streams are muted.

Constant Value: 4 (0x00000004)

INTERRUPTION_FILTER_ALL
Added in API level 23

public static final int INTERRUPTION_FILTER_ALL
Interruption filter constant - Normal interruption filter - no notifications are suppressed.

Constant Value: 1 (0x00000001)

INTERRUPTION_FILTER_NONE
Added in API level 23

public static final int INTERRUPTION_FILTER_NONE
Interruption filter constant - No interruptions filter - all notifications are suppressed and all audio streams (except those used for phone calls) and vibrations are muted.

Constant Value: 3 (0x00000003)

INTERRUPTION_FILTER_PRIORITY
Added in API level 23

public static final int INTERRUPTION_FILTER_PRIORITY
Interruption filter constant - Priority interruption filter - all notifications are suppressed except those that match the priority criteria. Some audio streams are muted. See Policy.priorityCallSenders, Policy.priorityCategories, Policy.priorityMessageSenders to define or query this criteria. Users can additionally specify packages that can bypass this interruption filter.

Constant Value: 2 (0x00000002)

INTERRUPTION_FILTER_UNKNOWN
Added in API level 23

public static final int INTERRUPTION_FILTER_UNKNOWN
Interruption filter constant - returned when the value is unavailable for any reason.

Constant Value: 0 (0x00000000)

META_DATA_AUTOMATIC_RULE_TYPE
Added in API level 29

public static final String META_DATA_AUTOMATIC_RULE_TYPE
A required meta-data tag for activities that handle ACTION_AUTOMATIC_ZEN_RULE. This tag should contain a localized name of the type of the zen rule provided by the activity.

Constant Value: "android.service.zen.automatic.ruleType"

META_DATA_RULE_INSTANCE_LIMIT
Added in API level 29

public static final String META_DATA_RULE_INSTANCE_LIMIT
An optional meta-data tag for activities that handle ACTION_AUTOMATIC_ZEN_RULE. This tag should contain the maximum number of rule instances that can be created for this rule type. Omit or enter a value <= 0 to allow unlimited instances.

Constant Value: "android.service.zen.automatic.ruleInstanceLimit"

Public methods
addAutomaticZenRule
Added in API level 24

public String addAutomaticZenRule (AutomaticZenRule automaticZenRule)
Creates the given zen rule.

Throws a SecurityException if policy access is not granted to this package. See isNotificationPolicyAccessGranted().

Parameters
automaticZenRule	AutomaticZenRule: the rule to create.
Returns
String	The id of the newly created rule; null if the rule could not be created.
areAutomaticZenRulesUserManaged
Added in API level 35

public boolean areAutomaticZenRulesUserManaged ()
Returns true if users can independently and fully manage AutomaticZenRule rules. This includes the ability to independently activate/deactivate rules and overwrite/freeze the behavior (policy) of the rule when activated.

If this method returns true, calls to updateAutomaticZenRule(java.lang.String, android.app.AutomaticZenRule) may fail and apps should defer rule management to system settings/uis via Settings.ACTION_AUTOMATIC_ZEN_RULE_SETTINGS.

Returns
boolean	
areBubblesAllowed
Added in API level 29
Deprecated in API level 31

public boolean areBubblesAllowed ()

This method was deprecated in API level 31.
use getBubblePreference() instead.

Gets whether all notifications posted by this app can appear outside of the notification shade, floating over other apps' content.

This value will be ignored for notifications that are posted to channels that do not allow bubbles (NotificationChannel.canBubble()).

Returns
boolean	
See also:

Notification.getBubbleMetadata()
areBubblesEnabled
Added in API level 31

public boolean areBubblesEnabled ()
Returns whether bubbles are enabled at the feature level for the current user. When enabled, notifications able to bubble will display an affordance allowing the user to bubble them.

Returns
boolean	
See also:

Notification.Builder.setBubbleMetadata(Notification.BubbleMetadata)
areNotificationsEnabled
Added in API level 24

public boolean areNotificationsEnabled ()
Returns whether notifications from the calling package are enabled.

Returns
boolean	
areNotificationsPaused
Added in API level 29

public boolean areNotificationsPaused ()
Returns whether notifications from this package are temporarily hidden. This could be done because the package was marked as distracting to the user via PackageManager#setDistractingPackageRestrictions(String[], int) or because the package is PackageManager#setPackagesSuspended(String[], boolean, PersistableBundle, PersistableBundle, SuspendDialogInfo) suspended.

Returns
boolean	
canNotifyAsPackage
Added in API level 29

public boolean canNotifyAsPackage (String pkg)
Returns whether you are allowed to post notifications on behalf of a given package, with notifyAsPackage(java.lang.String, java.lang.String, int, android.app.Notification). See setNotificationDelegate(java.lang.String).

Parameters
pkg	String: This value cannot be null.
Returns
boolean	
canPostPromotedNotifications
Added in API level 36

public boolean canPostPromotedNotifications ()
Returns whether the calling app's properly formatted notifications can appear in a promoted format, which may result in higher ranking, appearances on additional surfaces, and richer presentation. Apps can request this permission by sending the user to the activity that matches the system intent action Settings.ACTION_APP_NOTIFICATION_PROMOTION_SETTINGS.

Returns
boolean	
canUseFullScreenIntent
Added in API level 34

public boolean canUseFullScreenIntent ()
Returns whether the calling app can send fullscreen intents.

From Android Build.VERSION_CODES.UPSIDE_DOWN_CAKE, apps may not have permission to use Manifest.permission.USE_FULL_SCREEN_INTENT. If permission is denied, notification will show up as an expanded heads up notification on lockscreen.

To request access, add the Manifest.permission.USE_FULL_SCREEN_INTENT permission to your manifest, and use Settings.ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT.

Returns
boolean	
cancel
Added in API level 1

public void cancel (int id)
Cancels a previously posted notification.

If the notification does not currently represent a foreground service or a user-initiated job, it will be removed from the UI and live notification listeners will be informed so they can remove the notification from their UIs.

Parameters
id	int
cancel
Added in API level 5

public void cancel (String tag, 
                int id)
Cancels a previously posted notification.

If the notification does not currently represent a foreground service or a user-initiated job, it will be removed from the UI and live notification listeners will be informed so they can remove the notification from their UIs.

Parameters
tag	String: This value may be null.
id	int
cancelAll
Added in API level 1

public void cancelAll ()
Cancel all previously shown notifications. See cancel(int) for the detailed behavior.

cancelAsPackage
Added in API level 30

public void cancelAsPackage (String targetPackage, 
                String tag, 
                int id)
Cancels a previously posted notification.

If the notification does not currently represent a foreground service or a user-initiated job, it will be removed from the UI and live notification listeners will be informed so they can remove the notification from their UIs.

This method may be used by a notification delegate to cancel notifications that they have posted via notifyAsPackage(java.lang.String, java.lang.String, int, android.app.Notification).

Parameters
targetPackage	String: The package to cancel the notification as. If this package is not your package, you can only cancel notifications you posted with {@link #notifyAsPackage(java.lang.String,java.lang.String,int,android.app.Notification).
tag	String: A string identifier for this notification. May be null.
id	int: An identifier for this notification.
createNotificationChannel
Added in API level 26

public void createNotificationChannel (NotificationChannel channel)
Creates a notification channel that notifications can be posted to. This can also be used to restore a deleted channel and to update an existing channel's name, description, group, and/or importance.

The name and description should only be changed if the locale changes or in response to the user renaming this channel. For example, if a user has a channel named 'Messages' and the user changes their locale, this channel's name should be updated with the translation of 'Messages' in the new locale.

The importance of an existing channel will only be changed if the new importance is lower than the current value and the user has not altered any settings on this channel.

The group an existing channel will only be changed if the channel does not already belong to a group. All other fields are ignored for channels that already exist.

Parameters
channel	NotificationChannel: the channel to create. Note that the created channel may differ from this value. If the provided channel is malformed, a RemoteException will be thrown. This value cannot be null.
createNotificationChannelGroup
Added in API level 26

public void createNotificationChannelGroup (NotificationChannelGroup group)
Creates a group container for NotificationChannel objects. This can be used to rename an existing group.

Group information is only used for presentation, not for behavior. Groups are optional for channels, and you can have a mix of channels that belong to groups and channels that do not.

For example, if your application supports multiple accounts, and those accounts will have similar channels, you can create a group for each account with account specific labels instead of appending account information to each channel's label.

Parameters
group	NotificationChannelGroup: The group to create This value cannot be null.
createNotificationChannelGroups
Added in API level 26

public void createNotificationChannelGroups (List<NotificationChannelGroup> groups)
Creates multiple notification channel groups.

Parameters
groups	List: The list of groups to create This value cannot be null.
createNotificationChannels
Added in API level 26

public void createNotificationChannels (List<NotificationChannel> channels)
Creates multiple notification channels that different notifications can be posted to. See createNotificationChannel(android.app.NotificationChannel).

Parameters
channels	List: the list of channels to attempt to create. This value cannot be null.
deleteNotificationChannel
Added in API level 26

public void deleteNotificationChannel (String channelId)
Deletes the given notification channel.

If you create a new channel with this same id, the deleted channel will be un-deleted with all of the same settings it had before it was deleted.

Parameters
channelId	String
deleteNotificationChannelGroup
Added in API level 26

public void deleteNotificationChannelGroup (String groupId)
Deletes the given notification channel group, and all notification channels that belong to it.

Parameters
groupId	String
getActiveNotifications
Added in API level 23

public StatusBarNotification[] getActiveNotifications ()
Recover a list of active notifications: ones that have been posted by the calling app that have not yet been dismissed by the user or cancel(java.lang.String, int)ed by the app.

StatusBarNotification object, including the original tag and id supplied to notify() (via getTag() and getId()) as well as a copy of the original Notification object (via StatusBarNotification.getNotification()).

From Build.VERSION_CODES.Q, will also return notifications you've posted as an app's notification delegate via NotificationManager.notifyAsPackage(String, String, int, Notification).

Returns
StatusBarNotification[]	An array of StatusBarNotification.
getAutomaticZenRule
Added in API level 24

public AutomaticZenRule getAutomaticZenRule (String id)
Returns the AutomaticZenRule with the given id, if it exists and the caller has access.

Throws a SecurityException if policy access is not granted to this package. See isNotificationPolicyAccessGranted().

Returns null if there are no zen rules that match the given id, or if the calling package doesn't own the matching rule. See AutomaticZenRule.getOwner.

Parameters
id	String
Returns
AutomaticZenRule	
getAutomaticZenRuleState
Added in API level 35

public int getAutomaticZenRuleState (String id)
Returns the current activation state of an AutomaticZenRule.

Returns Condition.STATE_UNKNOWN if the rule does not exist or the calling package doesn't have access to it.

Parameters
id	String: The id of the rule This value cannot be null.
Returns
int	the state of the rule. Value is Condition.STATE_FALSE, Condition.STATE_TRUE, Condition.STATE_UNKNOWN, or Condition.STATE_ERROR
getAutomaticZenRules
Added in API level 24

public Map<String, AutomaticZenRule> getAutomaticZenRules ()
Returns AutomaticZenRules owned by the caller.

Throws a SecurityException if policy access is not granted to this package. See isNotificationPolicyAccessGranted().

Returns
Map<String, AutomaticZenRule>	
getBubblePreference
Added in API level 31

public int getBubblePreference ()
Gets the bubble preference for the app. This preference only applies to notifications that have been properly configured to bubble.

If BUBBLE_PREFERENCE_ALL, then any bubble notification will appear as a bubble, as long as the user hasn't excluded it (NotificationChannel.canBubble()).

If BUBBLE_PREFERENCE_SELECTED, then any bubble notification will appear as a bubble, as long as the user has selected it.

If BUBBLE_PREFERENCE_NONE, then no notification may appear as a bubble from the app.

Returns
int	the users' bubble preference for the app. Value is BUBBLE_PREFERENCE_NONE, BUBBLE_PREFERENCE_SELECTED, or BUBBLE_PREFERENCE_ALL
See also:

Notification.getBubbleMetadata()
getConsolidatedNotificationPolicy
Added in API level 30

public NotificationManager.Policy getConsolidatedNotificationPolicy ()
Returns the currently applied notification policy.

If getCurrentInterruptionFilter() is equal to INTERRUPTION_FILTER_ALL, then the consolidated notification policy will match the default notification policy returned by getNotificationPolicy().

Returns
NotificationManager.Policy	This value cannot be null.
getCurrentInterruptionFilter
Added in API level 23

public final int getCurrentInterruptionFilter ()
Gets the current notification interruption filter.

The interruption filter defines which notifications are allowed to interrupt the user (e.g. via sound & vibration) and is applied globally.

Returns
int	Value is INTERRUPTION_FILTER_NONE, INTERRUPTION_FILTER_PRIORITY, INTERRUPTION_FILTER_ALARMS, INTERRUPTION_FILTER_ALL, or INTERRUPTION_FILTER_UNKNOWN
getImportance
Added in API level 24

public int getImportance ()
Returns the user specified importance for notifications from the calling package.

Returns
int	Value is IMPORTANCE_UNSPECIFIED, IMPORTANCE_NONE, IMPORTANCE_MIN, IMPORTANCE_LOW, IMPORTANCE_DEFAULT, or IMPORTANCE_HIGH
getNotificationChannel
Added in API level 26

public NotificationChannel getNotificationChannel (String channelId)
Returns the notification channel settings for a given channel id.

The channel must belong to your package, or to a package you are an approved notification delegate for (see canNotifyAsPackage(java.lang.String)), or it will not be returned. To query a channel as a notification delegate, call this method from a context created for that package (see Context.createPackageContext(String, int)).

Parameters
channelId	String
Returns
NotificationChannel	
getNotificationChannel
Added in API level 30

public NotificationChannel getNotificationChannel (String channelId, 
                String conversationId)
Returns the notification channel settings for a given channel and conversation id.

The channel must belong to your package, or to a package you are an approved notification delegate for (see canNotifyAsPackage(java.lang.String)), or it will not be returned. To query a channel as a notification delegate, call this method from a context created for that package (see Context.createPackageContext(String, int)).

Parameters
channelId	String: This value cannot be null.
conversationId	String: This value cannot be null.
Returns
NotificationChannel	This value may be null.
getNotificationChannelGroup
Added in API level 28

public NotificationChannelGroup getNotificationChannelGroup (String channelGroupId)
Returns the notification channel group settings for a given channel group id. The channel group must belong to your package, or null will be returned.

Parameters
channelGroupId	String
Returns
NotificationChannelGroup	
getNotificationChannelGroups
Added in API level 26

public List<NotificationChannelGroup> getNotificationChannelGroups ()
Returns all notification channel groups belonging to the calling app.

Returns
List<NotificationChannelGroup>	
getNotificationChannels
Added in API level 26

public List<NotificationChannel> getNotificationChannels ()
Returns all notification channels belonging to the calling package.

Approved notification delegates (see canNotifyAsPackage(java.lang.String)) can query notification channels belonging to packages they are the delegate for. To do so, call this method from a context created for that package (see Context.createPackageContext(String, int)).

Returns
List<NotificationChannel>	
getNotificationDelegate
Added in API level 29

public String getNotificationDelegate ()
Returns the delegate that can post notifications on your behalf, if there currently is one.

Returns
String	This value may be null.
getNotificationPolicy
Added in API level 23

public NotificationManager.Policy getNotificationPolicy ()
Gets the current user-specified default notification policy.

For apps targeting Build.VERSION_CODES.VANILLA_ICE_CREAM and above (with some exceptions, such as companion device managers) this method will return the policy associated to their implicit AutomaticZenRule instead, if it exists. See setNotificationPolicy(android.app.NotificationManager.Policy).

Returns
NotificationManager.Policy	
isNotificationListenerAccessGranted
Added in API level 27

public boolean isNotificationListenerAccessGranted (ComponentName listener)
Checks whether the user has approved a given NotificationListenerService.

The listener service must belong to the calling app.

Apps can request notification listener access by sending the user to the activity that matches the system intent action Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS.

Parameters
listener	ComponentName
Returns
boolean	
isNotificationPolicyAccessGranted
Added in API level 23
public boolean isNotificationPolicyAccessGranted ()
Checks the ability to modify Notification Policy for the calling package.

Returns true if the calling package can modify notification policy.

Apps can request policy access by sending the user to the activity that matches the system intent action Settings.ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS.

Use ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED to listen for user grant or denial of this access.

Returns
boolean	
matchesCallFilter
Added in API level 33

public boolean matchesCallFilter (Uri uri)
Returns whether a call from the provided URI is permitted to notify the user.

A true return value indicates one of the following: Do Not Disturb is not currently active; or the caller is a repeat caller and the current policy allows interruptions from repeat callers; or the caller is in the user's set of contacts whose calls are allowed to interrupt Do Not Disturb.

If Do Not Disturb is enabled and either no interruptions or only alarms are allowed, this method will return false regardless of input.

The provided URI should be a tel: or mailto: schema URI indicating the source of the call. For an accurate answer regarding whether the caller matches the user's permitted contacts, the path part of the URI must match an entry the Contacts database in the appropriate column.

Passing in a ContactsContract.Contacts.CONTENT_LOOKUP_URI is also permissible, but should only be used for priority contact interruptions and may not provide accurate results in the case of repeat callers.

See also Person.Builder.setUri and ContactsContract.Contacts.CONTENT_LOOKUP_URI for more information.

Callers of this method must have notification listener access, permission to read contacts, or have system permissions.

NOTE: This method calls into Contacts, which may take some time, and should not be called on the main thread.


This method may take several seconds to complete, so it should only be called from a worker thread.
Parameters
uri	Uri: A URI representing a caller. Must not be null.
Returns
boolean	A boolean indicating whether a call from the URI provided would be allowed to interrupt the user given the current filter.
notify
Added in API level 1

public void notify (int id, 
                Notification notification)
Post a notification to be shown in the status bar. If a notification with the same id has already been posted by your application and has not yet been canceled, it will be replaced by the updated information.

Parameters
id	int: An identifier for this notification unique within your application.
notification	Notification: A Notification object describing what to show the user. Must not be null.
notify
Added in API level 5

public void notify (String tag, 
                int id, 
                Notification notification)
Posts a notification to be shown in the status bar. If a notification with the same tag and id has already been posted by your application and has not yet been canceled, it will be replaced by the updated information. All listener services will be granted Intent.FLAG_GRANT_READ_URI_PERMISSION access to any uris provided on this notification or the NotificationChannel this notification is posted to using Context.grantUriPermission(String, Uri, int). Permission will be revoked when the notification is canceled, or you can revoke permissions with Context.revokeUriPermission(Uri, int).

Parameters
tag	String: A string identifier for this notification. May be null.
id	int: An identifier for this notification. The pair (tag, id) must be unique within your application.
notification	Notification: A Notification object describing what to show the user. Must not be null.
notifyAsPackage
Added in API level 29

public void notifyAsPackage (String targetPackage, 
                String tag, 
                int id, 
                Notification notification)
Posts a notification as a specified package to be shown in the status bar. If a notification with the same tag and id has already been posted for that package and has not yet been canceled, it will be replaced by the updated information. All listener services will be granted Intent.FLAG_GRANT_READ_URI_PERMISSION access to any uris provided on this notification or the NotificationChannel this notification is posted to using Context.grantUriPermission(String, Uri, int). Permission will be revoked when the notification is canceled, or you can revoke permissions with Context.revokeUriPermission(Uri, int).

Parameters
targetPackage	String: The package to post the notification as. The package must have granted you access to post notifications on their behalf with setNotificationDelegate(java.lang.String). This value cannot be null.
tag	String: A string identifier for this notification. May be null.
id	int: An identifier for this notification. The pair (tag, id) must be unique within your application.
notification	Notification: A Notification object describing what to show the user. Must not be null.
removeAutomaticZenRule
Added in API level 24

public boolean removeAutomaticZenRule (String id)
Deletes the automatic zen rule with the given id.

Throws a SecurityException if policy access is not granted to this package. See isNotificationPolicyAccessGranted().

Callers can only delete rules that they own. See AutomaticZenRule.getOwner.

Parameters
id	String: the id of the rule to delete.
Returns
boolean	Whether the rule was successfully deleted.
setAutomaticZenRuleState
Added in API level 29

public void setAutomaticZenRuleState (String id, 
                Condition condition)
Informs the notification manager that the state of an AutomaticZenRule has changed. Use this method to put the system into Do Not Disturb mode or request that it exits Do Not Disturb mode. The calling app must own the provided AutomaticZenRule.

This method can be used in conjunction with or as a replacement to ConditionProviderService.notifyCondition(Condition).

The condition change may be ignored if the user has activated or deactivated the rule manually -- the user can "override" the rule this time, with the rule resuming its normal operation for the next cycle. When this has happened, the supplied condition will be applied only once the automatic state is in agreement with the user-provided state. For example, assume that the AutomaticZenRule corresponds to a "Driving Mode" with automatic driving detection.

App detects driving and notifies the system that the rule should be active, calling this method with a Condition with Condition.STATE_TRUE).
User deactivates ("snoozes") the rule for some reason. This overrides the app-provided condition state.
App is still detecting driving, so again calls with Condition.STATE_TRUE. This is ignored by the system, as the user override prevails.
Some time later, the app detects that driving stopped, so the rule should be inactive, and calls with Condition.STATE_FALSE). This doesn't change the actual rule state (it was already inactive due to the user's override), but clears the override.
Some time later, the app detects that driving has started again, and notifies that the rule should be active (calling with Condition.STATE_TRUE again). The rule is activated.
Note that the behavior at step #3 is different if the app also specifies Condition.SOURCE_USER_ACTION as the Condition.source -- rule state updates coming from user actions are not ignored.

Parameters
id	String: The id of the rule whose state should change This value cannot be null.
condition	Condition: The new state of this rule This value cannot be null.
setInterruptionFilter
Added in API level 23

public final void setInterruptionFilter (int interruptionFilter)
Sets the current notification interruption filter.

The interruption filter defines which notifications are allowed to interrupt the user (e.g. via sound & vibration) and is applied globally.

Apps targeting Build.VERSION_CODES.VANILLA_ICE_CREAM and above (with some exceptions, such as companion device managers) cannot modify the global interruption filter. Calling this method will instead activate or deactivate an AutomaticZenRule associated to the app, using a ZenPolicy that corresponds to the Policy supplied to setNotificationPolicy(android.app.NotificationManager.Policy) (or the global policy when one wasn't provided).

Only available if policy access is granted to this package. See isNotificationPolicyAccessGranted().

Parameters
interruptionFilter	int: Value is INTERRUPTION_FILTER_NONE, INTERRUPTION_FILTER_PRIORITY, INTERRUPTION_FILTER_ALARMS, INTERRUPTION_FILTER_ALL, or INTERRUPTION_FILTER_UNKNOWN
setNotificationDelegate
Added in API level 29

public void setNotificationDelegate (String delegate)
Allows a package to post notifications on your behalf using notifyAsPackage(java.lang.String, java.lang.String, int, android.app.Notification). This can be used to allow persistent processes to post notifications based on messages received on your behalf from the cloud, without your process having to wake up. You can check if you have an allowed delegate with getNotificationDelegate() and revoke your delegate by passing null to this method.

Parameters
delegate	String: Package name of the app which can send notifications on your behalf. This value may be null.
setNotificationPolicy
Added in API level 23

public void setNotificationPolicy (NotificationManager.Policy policy)
Sets the current notification policy (which applies when setInterruptionFilter(int) is called with the INTERRUPTION_FILTER_PRIORITY value).

Apps targeting Build.VERSION_CODES.VANILLA_ICE_CREAM and above (with some exceptions, such as companion device managers) cannot modify the global notification policy. Calling this method will instead create or update an AutomaticZenRule associated to the app, using a ZenPolicy corresponding to the Policy supplied here, and which will be activated/deactivated by calls to setInterruptionFilter(int).

Only available if policy access is granted to this package. See isNotificationPolicyAccessGranted().

Parameters
policy	NotificationManager.Policy: The new desired policy. This value cannot be null.
shouldHideSilentStatusBarIcons
Added in API level 29

public boolean shouldHideSilentStatusBarIcons ()
Returns whether the user wants silent notifications (see IMPORTANCE_LOW to appear in the status bar.

Only available for notification listeners.

Returns
boolean	
updateAutomaticZenRule
Added in API level 24

public boolean updateAutomaticZenRule (String id, 
                AutomaticZenRule automaticZenRule)
Updates the given zen rule.

Before Build.VERSION_CODES.VANILLA_ICE_CREAM, updating a rule that is not backed up by a ConditionProviderService will deactivate it if it was previously active. Starting with Build.VERSION_CODES.VANILLA_ICE_CREAM, this will only happen if the rule's definition is actually changing.

Throws a SecurityException if policy access is not granted to this package. See isNotificationPolicyAccessGranted().

Callers can only update rules that they own. See AutomaticZenRule.getOwner.

Parameters
id	String: The id of the rule to update
automaticZenRule	AutomaticZenRule: the rule to update.
Returns
boolean	Whether the rule was successfully updated.