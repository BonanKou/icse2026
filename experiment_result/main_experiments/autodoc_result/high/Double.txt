# API Document for Double

## Functionality
- `Double` values can represent numbers with higher precision compared to `Float` values.
- Operations with `Double` values implicitly involve rounding to the nearest representable number.
- `Double` provides approximately 15–17 decimal digits of precision.
- Common operations include arithmetic (+, -, *, /), comparisons, and mathematical functions (e.g., sqrt, pow).
- `Double` values support IEEE 754 special cases such as NaN (Not a Number), positive/negative infinity, and signed zero.

## Concept
- A `Double` can represent only a sparse subset of the real numbers due to limited binary precision.
- `Float` and `Double` in Kotlin (and Java) are binary floating-point types.
- Most decimal fractions do not have an exact binary representation, leading to approximation.
- Floating-point numbers, including `Double`, may introduce rounding errors in computations.
- Equality checks between floating-point values should be avoided or replaced with tolerance-based comparisons.

## Performance
- N/A

## Directive
- When converting a `Float` to a `Double`, the original float’s precision is preserved; rounding errors already present in the float will persist.
- Be cautious when using `Double` for high-precision applications such as financial or scientific systems.
- Avoid direct equality checks with `Double` due to potential rounding inconsistencies.
- When exact calculations are necessary, alternatives include:
  - Using integer types (`Int` or `Long`) to store the smallest indivisible unit (e.g., cents).
  - Using `java.math.BigDecimal` for exact decimal representation.
- Handle `BigDecimal` division carefully to avoid exceptions like `ArithmeticException` when dividing by non-terminating decimals (e.g., 1/3).

## Pattern
- `Double` is often used for continuous data where some loss of precision is acceptable, such as in graphics, sensor input, or scientific simulations.
- It is common to use `Double` in loops involving numeric calculations where performance is more important than exact decimal precision.

## Environment
- N/A

## Alternative
- Alternatives to `Double` include `BigDecimal` for precision and `Int`/`Long` for discrete numerical data.
- `BigDecimal` is preferred in financial applications where even small rounding errors are unacceptable.
- Integer types are useful when representing values in the smallest units to ensure accuracy and avoid floating-point math altogether.
- Use domain-specific libraries if working in fields like finance or engineering that demand high precision and proper rounding control.
