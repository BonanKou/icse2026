## IllegalArgumentException API Documentation (Kotlin)

### Functionality
1. **Exception Handling**: `IllegalArgumentException` is used to indicate that a method has been passed an illegal or inappropriate argument.
2. **Constructor Use**: You can create an `IllegalArgumentException` with optional detail messages to describe the specific violation.
   ```kotlin
   throw IllegalArgumentException("Invalid argument provided")
   ```
3. **Inheritance**: It extends `RuntimeException`, which means it is an unchecked exception that doesn’t need to be declared in a method's or constructor's `throws` clause.
4. **Error Reporting**: It provides mechanisms for reporting the exact argument that caused an issue, aiding in debugging.

### Concept
1. **Unchecked Exception**: `IllegalArgumentException` represents an unchecked exception, meaning it does not need to be caught or declared in method signatures.
2. **Parameter Validation**: Often used in methods to validate input parameters and ensure they meet certain criteria before proceeding with execution.
3. **RuntimeException**: As a subclass of `RuntimeException`, it fits into Kotlin’s exception handling model which distinguishes between checked and unchecked exceptions.
4. **Use Cases**: It is commonly used in public API methods where arguments need validation before further processing.

### Performance
1. **Exception Overhead**: Generally, exceptions in Kotlin introduce some performance overhead, as they capture stack traces and may require heap allocations.
2. **Handling Cost**: Frequent use in critical code paths may impact performance due to the try-catch mechanism, so validation logic should be as efficient as possible.

### Directive
1. **Argument Documentation**: Always document what constitutes a valid and invalid argument in the API documentation for clarity.
2. **Avoid Deep Stacking**: Limit nesting of try-catch blocks with `IllegalArgumentException` to keep code readable and maintainable.
3. **IllegalArgumentException vs. NullPointerException**: Use `IllegalArgumentException` for illegal arguments rather than a `NullPointerException`. Handle null checks separately, typically using Kotlin's null safety features.
4. **Meaningful Messages**: Always include a descriptive message when throwing an `IllegalArgumentException` to aid in understanding the failure.
5. **Logical Grouping**: Use if-else statements to logically group different checks and throw tailored `IllegalArgumentException`s as needed.

### Pattern
1. **Argument Checks**: Use `IllegalArgumentException` in parameter validation to enforce method contracts.
   ```kotlin
   fun setAge(age: Int) {
       if (age < 0) throw IllegalArgumentException("Age cannot be negative")
       // Process age
   }
   ```
2. **Preconditions**: It is often paired with Kotlin’s `require` and `check` functions that throw `IllegalArgumentException`.
   ```kotlin
   fun calculateDiscount(price: Double) {
       require(price >= 0) { "Price must not be negative" }
       // Calculate discount
   }
   ```
3. **Public APIs**: Commonly thrown in public-facing APIs to enforce correct usage by clients.
4. **Control Flow**: It can facilitate control flow by halting execution when an invalid argument is detected early.

### Environment
1. **Kotlin JVM**: `IllegalArgumentException` is a part of the Kotlin standard library and is available in any environment where Kotlin runs.
2. **Compatibility**: Works seamlessly with Java interop, enabling usage in projects with mixed Kotlin and Java codebases.

### Alternative
1. **Custom Exceptions**: For more specific error handling, consider defining custom exceptions extending `IllegalArgumentException`.
2. **NoSuchElementException**: When dealing with collections, if an expected element is missing, consider using `NoSuchElementException` instead.
3. **IndexOutOfBoundsException**: Use when an argument index is outside the acceptable range, rather than a general `IllegalArgumentException`.
4. **IllegalStateException**: Consider using `IllegalStateException` when the inappropriate condition involves the state of an object rather than its arguments.

### More Snippets
1. **Documentation in Code**: Use annotations and comments to provide inline documentation of when `IllegalArgumentException` might be thrown.
2. **Testing**: Ensure that unit tests cover scenarios where `IllegalArgumentException` should be thrown, verifying both the presence and the message text.
   ```kotlin
   class UserTest {
       @Test(expected = IllegalArgumentException::class)
       fun testWithInvalidAge() {
           User().setAge(-1)
       }
   }
   ```
3. **Minimal Try Blocks**: Constrain the code inside try blocks to the minimum possible to prevent catching and suppressing unrelated exceptions.
4. **Logging**: Consider logging the argument causing the exception to help diagnose and track down the source of the issue.
5. **IDE Features**: Make use of IDE features to auto-generate exception handling code to ensure consistent usage.
6. **Integration with Assertions**: Combine with assertions for critical operations where invalid arguments could cause severe errors.
7. **Deprecation Warnings**: Use in concert with deprecation warnings when argument types or ranges change between library versions.
8. **Code Clarity**: Write clear and concise code that clearly delineates where and why `IllegalArgumentException` might be thrown to ensure maintainability.
9. **Refactoring**: Regularly refactor validation logic to ensure it adheres to evolving best practices and design patterns.
10. **Stack Trace Analysis**: Use stack traces from `IllegalArgumentException` to analyze and optimize validation failures for better performance and reliability.