# MediaPlayer API Knowledge Document

## Functionality
- MediaPlayer in Android is used to control audio and video playback.
- `MediaPlayer.create()` is a convenience method for creating a MediaPlayer object with a given audio resource.
- `start()` begins playback of the media file from the current position.
- `pause()` pauses playback.
- `stop()` stops playback and resets the MediaPlayer to the IDLE state.
- `seekTo(int msec)` seeks to a specified time position (milliseconds) in the media file.
- `setDataSource(String path)` sets the data source (file path or URL) to the MediaPlayer.
- `setLooping(boolean looping)` sets whether the MediaPlayer should loop the media when it reaches the end.

## Concept
- MediaPlayer is a class in the Android framework for playing audio and video files.
- The lifecycle states of MediaPlayer include IDLE, INITIALIZED, PREPARED, STARTED, PAUSED, STOPPED, and PLAYBACK_COMPLETED.
- MediaPlayer requires appropriate permissions like `android.permission.INTERNET` to stream media over the network.
- MediaPlayer uses a SurfaceView or TextureView to display video content.
- Buffering is essential for streaming media files from a remote server.
- `OnCompletionListener` can be set to perform actions when media playback reaches the end.

## Performance
- MediaPlayer is optimized for efficient playback of media files but requires careful management of resources, especially with large files or streaming over a network.
- Using `prepareAsync()` is recommended over `prepare()` to avoid blocking the UI thread during media preparation.

## Directive
- Always release a MediaPlayer instance when done using it to free system resources: `mediaPlayer.release()`.
- Prepare the MediaPlayer for playback using `prepare()` or `prepareAsync()` after setting the data source.
- Ensure MediaPlayer is in the appropriate state before calling playback control methods like `start()`, `pause()`, or `stop()`.
- Handle exceptions such as `IOException` or `IllegalStateException` during MediaPlayer operations.
- Use `AudioManager` to manage audio focus when playing audio content.

## Pattern
- A common pattern for MediaPlayer is to initialize, prepare, and then start playback:
  ```java
  MediaPlayer mediaPlayer = MediaPlayer.create(context, R.raw.audio_file);
  mediaPlayer.start();
  ```
- Using `setOnPreparedListener()` allows actions to be defined when the media is ready for playback:
  ```java
  mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
      @Override
      public void onPrepared(MediaPlayer mp) {
          mp.start();
      }
  });
  ```
- To loop audio playback, use:
  ```java
  mediaPlayer.setLooping(true);
  ```
- For video playback, configure the display surface using `setDisplay(SurfaceHolder)`:
  ```java
  SurfaceHolder holder = surfaceView.getHolder();
  mediaPlayer.setDisplay(holder);
  ```
- Implement `setOnCompletionListener()` to execute code when playback completes:
  ```java
  mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
      @Override
      public void onCompletion(MediaPlayer mp) {
          // Code to execute when playback completes
      }
  });
  ```

## Environment
- MediaPlayer requires `android.permission.READ_EXTERNAL_STORAGE` to access media files from external storage.
- Streaming media requires a stable internet connection and `android.permission.INTERNET`.
- MediaPlayer functionality is supported on Android API level 1 or higher.

## Alternative
- Alternatives to MediaPlayer for more complex media needs include ExoPlayer, which provides more advanced features such as adaptive streaming, DRM support, and more extensive format support.
- For simpler audio playback needs, `SoundPool` can be used for managing and playing short audio samples.

This document provides a comprehensive overview of the MediaPlayer API, covering its functionalities, concepts, performance considerations, directives for usage, common patterns, environmental prerequisites, and alternatives.