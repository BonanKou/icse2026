So they're great when you care about doing calculations efficiently and flexibly — but not when you need to store exact decimal values.
And because they're exact, you shouldn't need to do any rounding — and probably won't need to do any formatting either.
If you care about exact decimal values, then don't use floating-point.
In Java, using it is awkward and long-winded, but Kotlin's operator overloading makes it very natural, e.g.:

DecimalFormat supports it too:

(Note: do not create a BigDecimal from a Float or Double, as the damage will already have been done.
For example, if you only ever need two decimal places (i.e. the number of paise), then simply store the number of paise as an integer.
However, you have a deeper issue here, which is that you should never use a Float or Double to store a value that needs to be exact, such as money.
Or if you don't need to do any calculations, you could store the number as a string (which is otherwise a bad idea…).
So if you need your money values to be accurate (and you almost always do!)
If you have an integer value, then start from an integer type such as Int or Long; otherwise, you'll need to start from a String to get an exact value.)
, then you should store them some other way.
This isn't always obvious — when printing them out, they get rounded again to the nearest decimal fraction, and in many cases that ‘recovers’ the number you want — but there are many cases where it's noticeable, especially as the result of calculations.
The difference of 64 bit width of a Double, and the 32 bit width of a Float means that when converting from Double to Float, we lose precision.
Otherwise you will need to use a Double for numbers as large as you are expecting.
There's very little overlap between the two, so in most cases the conversion will need to round the value.
For example, both 1.0 and 1.000000 are represented by exactly the same Double value:


I don't know Vert.x, but I'd be surprised if you really needed a Double here.
But not always, e.g.:

(All of this is discussed in other questions, most notably here.)
Or if that doesn't work, have you tried converting it to a String, which will preserve whatever formatting you want?
In practice, this is usually hidden from you, because when you print out a Double, the formatting routine will round it off, and in many cases that gives back the original number.
Or if you'll only need a certain number of decimal places, you could scale them all up to Ints (or Longs).
But that doesn't always give the result you expect.
However, just as you can't store 1/3 as a decimal fraction (it's 0.3333333333…, but any finite number of digits will only be an approximation), so you can't store 1/10 as a binary fraction (it's 0.000110011001100…).
Or if you're not going to be doing any calculations, you could store them as Strings.
Short answer:
If you need exact values, don't use floating-point!
(In particular: Never store money values in floating-point!
Floating-point numbers are great when you need a huge range of values (e.g. in scientific and technical use), but don't care about storing them exactly.
If you are using number types it does not really matter which to use, as both are implemented with Math.min(a, b) as you already pointed out.
If this value is in 0..9, the decimal digit Char with code '0'.code + this is returned.
Throws an exception if this value is not in the range 0..9.
The comparison between two Triple objects is done on the basis of values, i.e. two Triples are equal only if all three component are equal.
A – type of the first value
B – type of the second value
C – type of the third value
Constructor –
In Kotlin, constructor is a special member function that is invoked when an object of the class is created primarily to initialize variables or properties.
For example:

A double precision floating point number has only around 15-16 decimal digits of precision.
If you need perfect precision then use a type capable of doing that.
A double can represent only a sparse subset of the real numbers.
You might get away with using a double if you can format the output appropriately (which is essentially what Microsoft Excel does, along with some very clever tricks for expressions like 1/3 + 1/3 + 1/3).
If you're working with money, and don't need to worry about currencies that have 1000s (e.g. Tunisian Dinar) or bitcoin (8 decimal places), then working in cents and using integers is one approach.
You may also use another value if the live data is null (like 0) using the Elvis operator, but I won't suggest this solution, because the null value is not the same as the zero value.
You have to check the nullability before doing the comparison.
There is no exact double-precision floating point representation for 8875.87 so the rounding has already occurred before you call toBigDecimal.
To keep the precision, you need to pass the values to the BigDecimal constructor as a string:
Kotlin Discuss
This specifically works by outright dropping the decimal rather than applying any rounding
Would round up:

Would round down:

In general, division with a double will give the correct enough answer (Floating point math does break down in certain circumstances)
In the case of your example:

Integers never store any concept of decimals, in Kotlin the design decision was to use Integer based division following the choices of Java.
[Of course, even with this approach, you still need to build the BigDecimal.klib & integrate it into your project as described in the README.md.]