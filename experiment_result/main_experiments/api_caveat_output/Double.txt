There's very little overlap between the two, so in most cases the conversion will need to round the value.
For example, both 1.0 and 1.000000 are represented by exactly the same Double value:


I don't know Vert.x, but I'd be surprised if you really needed a Double here.
But not always, e.g.:

(All of this is discussed in other questions, most notably here.)
Or if that doesn't work, have you tried converting it to a String, which will preserve whatever formatting you want?
In practice, this is usually hidden from you, because when you print out a Double, the formatting routine will round it off, and in many cases that gives back the original number.
If you need perfect precision then use a type capable of doing that.
A double can represent only a sparse subset of the real numbers.
You might get away with using a double if you can format the output appropriately (which is essentially what Microsoft Excel does, along with some very clever tricks for expressions like 1/3 + 1/3 + 1/3).
If you're working with money, and don't need to worry about currencies that have 1000s (e.g. Tunisian Dinar) or bitcoin (8 decimal places), then working in cents and using integers is one approach.
The difference of 64 bit width of a Double, and the 32 bit width of a Float means that when converting from Double to Float, we lose precision.
Otherwise you will need to use a Double for numbers as large as you are expecting.
Unless you explicitly only want 0.0-1.0 ?
This will do it if you want to check steps of 0.1 for any double.
Multiply by 10, check if the result is an integer.
// Edit: If you are interested in how exactly floating point numbers work, I would recommend you to have a look at the wikipedia article on floating point arithmetic and at this question: Is floating point math broken?
So as you can see, 0.08 double value is (till the 20th decimal place) exact to 0.08 while the float is (due to lower precision) not able to be represented as exact so it contains a rounded value, which is slightly lower than 0.08
Converting your approximate (a little lower) 0.08 float to a double doesn't increase your precision, you still have your rounding error of the float, which results in being the converted double to be a little bit lower.
You must use BigDecimal at every stage of your code.
If you want this rounding to work correctly, you must never, ever use Double.
You can define the function as follows:
fun multiply(x: Double, y: Double): Double { return x * y }
or if you wish to have single statement method, then you can define as below
fun multiply(x: Double, y: Double)
There is no exact double-precision floating point representation for 8875.87 so the rounding has already occurred before you call toBigDecimal.
To keep the precision, you need to pass the values to the BigDecimal constructor as a string:
The simple upshot is that all doubles are slightly wrong and if you are writing systems or applications where this slight error is not acceptable (trivial example: Everything financial - you do NOT want to lose a random cent due to impossible to predict rounding errors!!)
So, where in decimal you can write '1/10' on a piece of paper perfectly, but you cannot write '1/3' on a piece of paper perfectly, computers can only write X/Y where Y is a factor of 2 perfectly.
For example, if I am a bank and I need to levy a transaction charge of €100,- to a partnership of 3 companies that are equal partners, then what do I do?
But note that if you ask BigDecimal to divide 1 by 3, it throws an exception, because that is not possible, so, apply caution.
Thus, when talking about 'formatting' a double in the sense of 'I want x digits', this is completely misleading, because the thing that is in that variable has digits written out in binary and not in decimal, and is rounded to something that doesn't even make sense in decimal.
Before that makes you go: What.. the?
Computers are binary after all.
For example, do not store an item that costs a buck and a half as double price = 1.50.
Everything rounds, everywhere, at all times, silently, with no way to know how much error this rounding introduces.
Demand that the parties involved appoint a main account, which gets charged all of it, or if not, the €33,34?
Track in each account a residual charge of 0.33333333333333333333333 cents (tossing the remainder away as a rounding error that truly nobody is ever going to care about), even though generally in financial systems, you cannot convey the notion of fractional cents?
and you need to think about it, there is no one set way to do it.
Given that there is such a thing as an atomary, when asked to divide you're hosed anyway
The problem here is not in the setScale() call, but happens before that.
No Double can store that exactly; the best if can do is store a value very close to it.)
The BigDecimal then does its best to store that value as precisely as possible.
Because this is a very strange thing to do and I can't think of a reason why you would need to do this in any application.
The way a double is stored with a floating point is always an approximation of a number.
If we knew what you're trying to achieve with this kind of data transformation perhaps we could offer a different alternative?
If you know how many digits you want to keep after the decimal part you could just multiply by 10^n and store the result in an int.