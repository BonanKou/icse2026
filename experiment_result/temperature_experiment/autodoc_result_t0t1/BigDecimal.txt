# BigDecimal API Knowledge

## Functionality
- BigDecimal is used for storing and manipulating exact decimal numbers.
- BigDecimal uses decimal fractions internally to represent any decimal number exactly, to any precision you need, and you can easily do calculations and other manipulations.
- BigDecimal can store and calculate decimal fractions to an arbitrary precision.

## Concept
- BigDecimal is a type intended for storing exact decimal values.
- Floating-point types like Float and Double use binary floating-point, which is not suitable for storing exact decimal values.
- BigDecimal is less efficient than floating-point types but is suitable for projects where exact decimal representation is crucial, such as calculator projects.
- Kotlin provides extensions that make handling BigDecimals almost as easy as native types.
- BigDecimal allows for exact storage and manipulation of decimal numbers, eliminating the need for rounding and possibly formatting.
- It is important to create BigDecimal instances directly from strings to avoid rounding issues associated with converting from floats/doubles.
- BigDecimal has more possible values than Double, making conversion from BigDecimal to Double lossy.
- BigDecimal can represent decimal fractions, while Double represents binary fractions, leading to potential rounding during conversion.
- BigDecimal can store integers and certain fractions exactly, similar to Double, but most decimal fractions cannot be exactly represented as binary fractions.
- BigDecimal is effectively unlimited in precision, unlike Double, which is limited to 64-bit precision.
- Unlike BigDecimal, Double does not maintain precision, meaning it cannot distinguish between values like 1.0 and 1.000000, which are represented the same in Double.
- BigDecimal can be created with a Double.
- BigDecimal is a decimal type that provides perfect precision.

## Performance
- BigDecimal is a little less efficient than native types like Float and Double, but not by enough to be significant in a calculator project.
- BigDecimal is less efficient in terms of performance compared to floating-point numbers.

## Directive
- Use BigDecimal for storing exact decimal values instead of floating-point types.
- BigDecimal is intended for storing and manipulating decimal numbers exactly.
- Avoid using floating-point types like Float and Double when exact decimal values are needed, as they use binary floating-point representation.
- In Kotlin, there are extensions that make handling BigDecimals almost as easy as native types.
- BigDecimals are less efficient than floating-point types but are suitable for projects where exact decimal representation is crucial, such as calculator projects.
- When using BigDecimal, create them directly from strings to avoid rounding errors associated with converting from floats/doubles.
- Never use a Float or Double to store a value that needs to be exact, such as money.
- Use BigDecimal to represent any decimal number exactly, to any precision needed, and to perform calculations and other manipulations.
- Do not create a BigDecimal from a Float or Double, as the damage from approximation will already have been done.
- If you have an integer value, start from an integer type such as Int or Long to create a BigDecimal.
- If you need an exact value from a non-integer, start from a String to create a BigDecimal.
- When converting a BigDecimal to a Double, be aware that the conversion is lossy due to the limited precision and binary fraction representation of Doubles compared to the arbitrary precision and decimal fraction representation of BigDecimals.
- If you need exact values, don't use floating-point.
- Never store money values in floating-point.
- The best alternative for exact decimal values is usually `BigDecimal`, which can store and calculate decimal fractions to an arbitrary precision.
- `BigDecimal` is less efficient than floating-point numbers, but Kotlin's operator overloading makes them easier to use compared to Java.
- To maintain precision when creating a BigDecimal, pass the value to the BigDecimal constructor as a string instead of a double.

## Pattern
- BigDecimal is commonly used for storing and manipulating exact decimal values, especially when exactness is crucial, as opposed to using floating-point types which may introduce rounding errors.
- BigDecimal is commonly used to store and perform calculations on values that need to be exact, such as money, because it uses decimal fractions internally to represent any decimal number exactly, to any precision needed.
- BigDecimal is commonly used when exact decimal values are needed, such as in financial calculations, because it can store and calculate decimal fractions to an arbitrary precision, unlike floating-point numbers which cannot store most decimal numbers exactly.
- BigDecimal is commonly used for representing and formatting large numbers with high precision, beyond the precision limits of double precision floating point numbers.

## Environment
- No specific environment knowledge provided.

## Alternative
- **String**: If you are not going to be doing any calculations, you could store values as Strings.
- **Int or Long**: If you'll only need a certain number of decimal places, you could scale them all up to Ints or Longs.